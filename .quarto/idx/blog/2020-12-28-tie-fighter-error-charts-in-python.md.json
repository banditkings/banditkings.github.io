{"title":"'Tie Fighter' Errorbar Charts in Python with Plotnine and Altair","markdown":{"yaml":{"title":"'Tie Fighter' Errorbar Charts in Python with Plotnine and Altair","date":"2020-12-28","categories":["python","dataviz"],"summary":"ggplot2 for Python is definitely a thing. Oh, and Altair's ok too.","canonicalUrl":"https://www.nelsontang.com/tie-fighter-error-charts-in-python","images":["/static/images/tiefighter/tiefighter1.png","/static/images/tiefighter/tiefighter2.png","/static/images/tiefighter/tiefighter3.png"]},"headingText":"Plotnine","containsRefs":false,"markdown":"\n\nIt's December 2020 and it's time to check out different python plotting packages. I primarily will use pandas dataframe plotting with either seaborn's `sns.set()` or [setting plotly as the plotting backend](https://plotly.com/python/pandas-backend/) during data exploration, but there's nothing in python that matches R's `ggplot2`. I've known about [plotnine](https://plotnine.readthedocs.io/en/stable/) as the python equivalent but last time I tried it it was still lacking in the feature department. I'm happy to say that it's totally viable now.\n\nOne chart that I often used in R was a 'tie fighter' (error bar) chart. It's handy to compare accuracy for various predictive models. [Here's a motivating example from 'thecodeforest' where he compares various time serious forecasting models in R](https://thecodeforest.github.io/post/tidy_time_series_forecasting.html). I'm also motivated to stick with ggplot because then I'd be able to quickly make plots in R, python, and in Julia (given how seamless `RCall` is in Julia and native support of dataframes).\n\n\nHere's what the syntax for a quick tie fighter chart in `plotnine` using the included [`mtcars` dataset](https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/mtcars.html) as a toy example:\n\n```python\nfrom plotnine import *\nfrom plotnine.data import mtcars\nimport pandas as pd\nimport numpy as np\nfrom scipy.stats import sem\n\n# Calc mean, std error of mpg by number of cylinders and whether they're automatic (0) or manual (1)\ndf = mtcars.groupby(['cyl', 'am'])['mpg'].agg([np.mean, sem]).reset_index()\n\np = (ggplot(df, aes('factor(cyl)', 'mean', color='factor(am)'))\n+ geom_point()\n+ geom_errorbar(aes(ymin = 'mean - sem', ymax = 'mean + sem'))\n+ coord_flip()\n+ labs(title=\"A Tie Fighter Chart\",\n        x = 'Cylinders',\n        y = 'Mean MPG +/-1 SE')\n)\n\np\n```\n\n![img](/static/images/tiefighter/tiefighter1.png)\n\nAnd what I love about `ggplot2` (and `plotnine`) is the consistent syntax and how easy it is to add or remove customization and complexity compared to the other plotting libraries in python:\n\n```python\n# Now it's trivial to add or remove stuff to our plots, even in python!\np + theme(xkcd)\n```\n\n![img](/static/images/tiefighter/tiefighter2.png)\n\nOne thing we're still missing is the ability to do subtitles and captions, but maybe someday.\n\n# Altair\n\n[Altair](https://altair-viz.github.io) is another opinionated plotting package based on Vega-lite that has a very consistent syntax that's worth a look.\n\nHere's the same example as above, but in Altair:\n\n```python\nimport altair as alt\nfrom plotnine.data import mtcars\n\npoints = alt.Chart(mtcars).mark_point().encode(\n    x='average(mpg):Q',\n    y='cyl:O',\n    color='am:N',\n).properties(height=200)\n\nerror_bars = alt.Chart(mtcars).mark_errorbar(extent='stderr', ticks=True).encode(\n  x=alt.X('average(mpg):Q', scale=alt.Scale(zero=False)),\n  y=alt.Y('cyl:O'),\n  color='am:N',\n)\n\npoints+error_bars\n```\n\n![img](/static/images/tiefighter/tiefighter3.png)\n\nNotice that `Altair` has baked in aggregation and transformations so I didn't have to do my `groupby` and `agg` in `pandas`. And similar to what I like in `ggplot2`/`plotnine` there's the ability to quickly add and remove complexity. But as you can see the result was _so small_ on my macbook pro, and I wish there was an easy way to scale the whole thing up to a reasonable aspect ratio (looks like I'd have to scale up each component separately or save as SVG).\n","srcMarkdownNoYaml":"\n\nIt's December 2020 and it's time to check out different python plotting packages. I primarily will use pandas dataframe plotting with either seaborn's `sns.set()` or [setting plotly as the plotting backend](https://plotly.com/python/pandas-backend/) during data exploration, but there's nothing in python that matches R's `ggplot2`. I've known about [plotnine](https://plotnine.readthedocs.io/en/stable/) as the python equivalent but last time I tried it it was still lacking in the feature department. I'm happy to say that it's totally viable now.\n\nOne chart that I often used in R was a 'tie fighter' (error bar) chart. It's handy to compare accuracy for various predictive models. [Here's a motivating example from 'thecodeforest' where he compares various time serious forecasting models in R](https://thecodeforest.github.io/post/tidy_time_series_forecasting.html). I'm also motivated to stick with ggplot because then I'd be able to quickly make plots in R, python, and in Julia (given how seamless `RCall` is in Julia and native support of dataframes).\n\n# Plotnine\n\nHere's what the syntax for a quick tie fighter chart in `plotnine` using the included [`mtcars` dataset](https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/mtcars.html) as a toy example:\n\n```python\nfrom plotnine import *\nfrom plotnine.data import mtcars\nimport pandas as pd\nimport numpy as np\nfrom scipy.stats import sem\n\n# Calc mean, std error of mpg by number of cylinders and whether they're automatic (0) or manual (1)\ndf = mtcars.groupby(['cyl', 'am'])['mpg'].agg([np.mean, sem]).reset_index()\n\np = (ggplot(df, aes('factor(cyl)', 'mean', color='factor(am)'))\n+ geom_point()\n+ geom_errorbar(aes(ymin = 'mean - sem', ymax = 'mean + sem'))\n+ coord_flip()\n+ labs(title=\"A Tie Fighter Chart\",\n        x = 'Cylinders',\n        y = 'Mean MPG +/-1 SE')\n)\n\np\n```\n\n![img](/static/images/tiefighter/tiefighter1.png)\n\nAnd what I love about `ggplot2` (and `plotnine`) is the consistent syntax and how easy it is to add or remove customization and complexity compared to the other plotting libraries in python:\n\n```python\n# Now it's trivial to add or remove stuff to our plots, even in python!\np + theme(xkcd)\n```\n\n![img](/static/images/tiefighter/tiefighter2.png)\n\nOne thing we're still missing is the ability to do subtitles and captions, but maybe someday.\n\n# Altair\n\n[Altair](https://altair-viz.github.io) is another opinionated plotting package based on Vega-lite that has a very consistent syntax that's worth a look.\n\nHere's the same example as above, but in Altair:\n\n```python\nimport altair as alt\nfrom plotnine.data import mtcars\n\npoints = alt.Chart(mtcars).mark_point().encode(\n    x='average(mpg):Q',\n    y='cyl:O',\n    color='am:N',\n).properties(height=200)\n\nerror_bars = alt.Chart(mtcars).mark_errorbar(extent='stderr', ticks=True).encode(\n  x=alt.X('average(mpg):Q', scale=alt.Scale(zero=False)),\n  y=alt.Y('cyl:O'),\n  color='am:N',\n)\n\npoints+error_bars\n```\n\n![img](/static/images/tiefighter/tiefighter3.png)\n\nNotice that `Altair` has baked in aggregation and transformations so I didn't have to do my `groupby` and `agg` in `pandas`. And similar to what I like in `ggplot2`/`plotnine` there's the ability to quickly add and remove complexity. But as you can see the result was _so small_ on my macbook pro, and I wish there was an easy way to scale the whole thing up to a reasonable aspect ratio (looks like I'd have to scale up each component separately or save as SVG).\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"output-file":"2020-12-28-tie-fighter-error-charts-in-python.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.52","theme":{"light":"cosmo"},"title-block-banner":true,"title":"'Tie Fighter' Errorbar Charts in Python with Plotnine and Altair","date":"2020-12-28","categories":["python","dataviz"],"summary":"ggplot2 for Python is definitely a thing. Oh, and Altair's ok too.","canonicalUrl":"https://www.nelsontang.com/tie-fighter-error-charts-in-python","images":["/static/images/tiefighter/tiefighter1.png","/static/images/tiefighter/tiefighter2.png","/static/images/tiefighter/tiefighter3.png"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}
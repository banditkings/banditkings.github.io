{"title":"Make a Basic PnL Dataframe in Pandas","markdown":{"yaml":{"title":"Make a Basic PnL Dataframe in Pandas","date":"2020-06-30","tags":["python","workflow"],"categories":["workflow"],"summary":"Code snippet to create a PnL (Profit and Loss Statement) Dataframe in Pandas","aliases":["/quick-pnl-dataframe/"],"canonicalUrl":"https://www.nelsontang.com/blog/2020-06-30-quick-pnl-dataframe","images":["/static/images/pnl/example_pnl.png","/static/images/pnl/example_pnl2.png","/static/images/pnl/example_pnl3.png","/static/images/pnl/example_pnl4.png","/static/images/pnl/example_pnl5.png"]},"headingText":"For convenience while using a Jupyter Notebook,","containsRefs":false,"markdown":"\n\nThis code creates a practice dataframe for instruction in a format that is familiar with finance analysts. Analysts typically deal with profit and loss statement data in excel spreadsheets, often pulled or aggregated from an ERP source system and this example shows a toy example that has some relevant fields and formatting.\n\n```python\nimport pandas as pd\n\n# display dataframe floats as currency & round to two decimal places\npd.options.display.float_format = '${:,.2f}'.format\n\ndef make_pnl():\n    df = pd.DataFrame(data={'ProductLine': ['A', 'A', 'B', 'B'],\n                            'FunctionalArea': ['REV', 'COS']*2,\n                            'AccountL1': ['Revenue', 'Cost of Sales']*2,\n                            '201901 ACT': [200., 100., 150., 75.],\n                            '202001 ACT': [210., 105., 150., 75.],\n                            '202001 POR': [205., 105., 150., 75.]\n                        })\n    return df\n\ndf = make_pnl()\n```\n\n![img](/static/images/pnl/example_pnl.png)\n\nThis is a very simplified version of the data that would be familiar to analysts. In reality, there would be many more fields and values, depending on the level of granularity that's available. The columns like '201901 ACT' are time periods in a YYYYQQ format and the last three letters signify whether it is an actual or forecast (POR or Plan of Record) value.\n\n## Multi-Index DataFrame Slicing\n\nIt might also be useful to make this a multiindex dataframe for easier grouping/slicing and to reduce the amount of space the dataframe takes up in memory.\n\n```python\ndf.set_index(['ProductLine', 'FunctionalArea', 'AccountL1'], inplace=True)\n```\n\n![img](/static/images/pnl/example_pnl2.png)\n\nYou may need to use sets to slice among items in your index. Use `slice(None)` to skip levels in your index if needed.\n\n```python\ndf.loc[('A', slice(None), 'Cost of Sales')]\n```\n\nand returns:\n![img](/static/images/pnl/example_pnl3.png)\n\nWhich is the same as using the `query()` method:\n\n```python\ndf.query(\"ProductLine=='A' & AccountL1=='Cost of Sales'\")\n```\n\n## Converting from Wide to Long format with pd.melt()\n\nAnother useful transformation is to 'unpivot' the data with `pd.melt()`.\n\n```python\nid_vars = ['ProductLine', 'FunctionalArea', 'AccountL1']\ndfl= df.reset_index().melt(id_vars=id_vars, var_name='Period', value_name='Value')\n```\n\n![img](/static/images/pnl/example_pnl4.png)\n\n## Join Previous Cycle for Recons\n\nYou'll often need to reconcile PnL data against other time periods, like prior quarters, prior years, actuals vs forecasts, and so on.\n\nIn a spreadsheet you'd manually manipulate and select columns and subsets of data to perform this. In Python, you can perform a SQL-style lookup and join so that you create those reconciliations in a table of data that you can slice and lookup later.\n\n```python\nid_vars = ['ProductLine', 'FunctionalArea', 'AccountL1']\n\n# Pull in data in long format\ndfl = df.reset_index().melt(id_vars=id_vars, var_name='Period', value_name='Value')\n\n# Create new features by parsing text\ndfl['YYYY'] = dfl['Period'].apply(lambda x: x[:4]).astype(int)\ndfl['Q'] = dfl['Period'].apply(lambda x: x[5]).astype(int)\n\n# Use new features to calculate lookup columns\ndfl['Prior_Year_Period'] = ((dfl['YYYY'] - 1) *100 + dfl['Q']).astype(str) + \" ACT\"\n\n# Create a subset to use as the right dataframe\ndf2 = dfl[id_vars + ['Period', 'Value']].rename({'Value': 'PY_Value'}, axis=1)\n\n# Left Join the original dataframe with the right dataframe\ndfNew = dfl.merge(df2,\n                  left_on=id_vars+['Prior_Year_Period'],\n                  right_on=id_vars+['Period'],\n                  how='left',\n                  suffixes=[\"\", \"_DROP\"])\n\n# Drop duplicate columns\ndfNew.drop(dfNew.filter(regex='_DROP$').columns.tolist(),axis=1, inplace=True)\n```\n\nAnd we see the result works. In this example, we don't have 201801 ACT data so it's a `np.nan` value, but you see the rest of the values filled in as expected for prior year values.\n\n![img](/static/images/pnl/example_pnl5.png)\n","srcMarkdownNoYaml":"\n\nThis code creates a practice dataframe for instruction in a format that is familiar with finance analysts. Analysts typically deal with profit and loss statement data in excel spreadsheets, often pulled or aggregated from an ERP source system and this example shows a toy example that has some relevant fields and formatting.\n\n```python\nimport pandas as pd\n\n# For convenience while using a Jupyter Notebook,\n# display dataframe floats as currency & round to two decimal places\npd.options.display.float_format = '${:,.2f}'.format\n\ndef make_pnl():\n    df = pd.DataFrame(data={'ProductLine': ['A', 'A', 'B', 'B'],\n                            'FunctionalArea': ['REV', 'COS']*2,\n                            'AccountL1': ['Revenue', 'Cost of Sales']*2,\n                            '201901 ACT': [200., 100., 150., 75.],\n                            '202001 ACT': [210., 105., 150., 75.],\n                            '202001 POR': [205., 105., 150., 75.]\n                        })\n    return df\n\ndf = make_pnl()\n```\n\n![img](/static/images/pnl/example_pnl.png)\n\nThis is a very simplified version of the data that would be familiar to analysts. In reality, there would be many more fields and values, depending on the level of granularity that's available. The columns like '201901 ACT' are time periods in a YYYYQQ format and the last three letters signify whether it is an actual or forecast (POR or Plan of Record) value.\n\n## Multi-Index DataFrame Slicing\n\nIt might also be useful to make this a multiindex dataframe for easier grouping/slicing and to reduce the amount of space the dataframe takes up in memory.\n\n```python\ndf.set_index(['ProductLine', 'FunctionalArea', 'AccountL1'], inplace=True)\n```\n\n![img](/static/images/pnl/example_pnl2.png)\n\nYou may need to use sets to slice among items in your index. Use `slice(None)` to skip levels in your index if needed.\n\n```python\ndf.loc[('A', slice(None), 'Cost of Sales')]\n```\n\nand returns:\n![img](/static/images/pnl/example_pnl3.png)\n\nWhich is the same as using the `query()` method:\n\n```python\ndf.query(\"ProductLine=='A' & AccountL1=='Cost of Sales'\")\n```\n\n## Converting from Wide to Long format with pd.melt()\n\nAnother useful transformation is to 'unpivot' the data with `pd.melt()`.\n\n```python\nid_vars = ['ProductLine', 'FunctionalArea', 'AccountL1']\ndfl= df.reset_index().melt(id_vars=id_vars, var_name='Period', value_name='Value')\n```\n\n![img](/static/images/pnl/example_pnl4.png)\n\n## Join Previous Cycle for Recons\n\nYou'll often need to reconcile PnL data against other time periods, like prior quarters, prior years, actuals vs forecasts, and so on.\n\nIn a spreadsheet you'd manually manipulate and select columns and subsets of data to perform this. In Python, you can perform a SQL-style lookup and join so that you create those reconciliations in a table of data that you can slice and lookup later.\n\n```python\nid_vars = ['ProductLine', 'FunctionalArea', 'AccountL1']\n\n# Pull in data in long format\ndfl = df.reset_index().melt(id_vars=id_vars, var_name='Period', value_name='Value')\n\n# Create new features by parsing text\ndfl['YYYY'] = dfl['Period'].apply(lambda x: x[:4]).astype(int)\ndfl['Q'] = dfl['Period'].apply(lambda x: x[5]).astype(int)\n\n# Use new features to calculate lookup columns\ndfl['Prior_Year_Period'] = ((dfl['YYYY'] - 1) *100 + dfl['Q']).astype(str) + \" ACT\"\n\n# Create a subset to use as the right dataframe\ndf2 = dfl[id_vars + ['Period', 'Value']].rename({'Value': 'PY_Value'}, axis=1)\n\n# Left Join the original dataframe with the right dataframe\ndfNew = dfl.merge(df2,\n                  left_on=id_vars+['Prior_Year_Period'],\n                  right_on=id_vars+['Period'],\n                  how='left',\n                  suffixes=[\"\", \"_DROP\"])\n\n# Drop duplicate columns\ndfNew.drop(dfNew.filter(regex='_DROP$').columns.tolist(),axis=1, inplace=True)\n```\n\nAnd we see the result works. In this example, we don't have 201801 ACT data so it's a `np.nan` value, but you see the rest of the values filled in as expected for prior year values.\n\n![img](/static/images/pnl/example_pnl5.png)\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"output-file":"2020-06-30-quick-pnl-dataframe.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.52","theme":{"light":"cosmo"},"title-block-banner":true,"title":"Make a Basic PnL Dataframe in Pandas","date":"2020-06-30","tags":["python","workflow"],"categories":["workflow"],"summary":"Code snippet to create a PnL (Profit and Loss Statement) Dataframe in Pandas","aliases":["/quick-pnl-dataframe/"],"canonicalUrl":"https://www.nelsontang.com/blog/2020-06-30-quick-pnl-dataframe","images":["/static/images/pnl/example_pnl.png","/static/images/pnl/example_pnl2.png","/static/images/pnl/example_pnl3.png","/static/images/pnl/example_pnl4.png","/static/images/pnl/example_pnl5.png"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}
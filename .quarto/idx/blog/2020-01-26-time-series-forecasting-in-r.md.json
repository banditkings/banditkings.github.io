{"title":"Time Series Cheat Sheet in R","markdown":{"yaml":{"title":"Time Series Cheat Sheet in R","date":"2020-01-26","tags":["forecasting","r"],"categories":["modeling"],"summary":"Getting started using the `forecast` package for time series data in R, as quickly as possible and no explanations.","aliases":["/time-series-forecasting-in-r/"],"canonicalUrl":"https://www.nelsontang.com/blog/2020-01-26-time-series-forecasting-in-r"},"headingText":"Data Prep","containsRefs":false,"markdown":"\n\nGetting started using the `forecast` package for time series data in R, as quickly as possible and no explanations.\n\nSource: [Forecasting: Principles and Practice](https://otexts.com/fpp2/)\n\n\nCoerce your data to `ts` format:\n\n```r\nlibrary(tidyverse)\nlibrary(forecast)\n\nmyts <- ts(df, start = c(1981,1), frequency = 12)\n```\n\n# Exploring and Plotting `ts` Data\n\n- `autoplot()`: Useful function to plot data and forecasts\n\n## Seasonality\n\n- `ggseasonplot()`: Create a seasonal plot\n- `ggsubseriesplot()`: Create mini plots for each season and show seasonal means\n\n## Lags and ACF\n\n- `gglagplot()`: Plot the time series against lags of itself\n- `ggAcf()`: Plot the autocorrelation function (ACF)\n\n## White Noise and the Ljung-Box Test\n\nWhite Noise is another name for a time series of iid data. Purely random. Ideally your model residuals should look like white noise.\n\nYou can use the Ljung-Box test to check if a time series is white noise, here's an example with 24 lags:\n\n```r\nBox.test(data, lag = 24, type=\"Lj\")\n```\n\np-value > 0.05 suggests data are not significantly different than white noise\n\n# Model Selection\n\nThe `forecast` package includes a few common models out of the box. Fit the model and create a `forecast` object, and then use the `forecast()` function on the object and a number of `h` periods to predict.\n\nExample of the workflow:\n\n```r\ntrain <- window(data, start = 1980)\nfit <- naive(train)\ncheckresiduals(fit)\npred <- forecast(fit, h=4)\naccuracy(pred, data)\n```\n\n## Naive Models\n\nUseful to benchmark against naive and seasonal naive models.\n\n- `naive()`\n- `snaive()`\n\n## Residuals\n\nResiduals are the difference between the model's fitted values and the actual data. Residuals should look like white noise and be:\n\n- Uncorrelated\n- Have mean zero\n\nAnd ideally have:\n\n- Constant variance\n- A normal distribution\n\n`checkresiduals()`: helper function to plot the residuals, plot the ACF and histogram, and do a Ljung-Box test on the residuals.\n\n## Evaluating Model Accuracy\n\nTrain/Test split with window function:\n\n`window(data, start, end)`: to slice the `ts` data\n\nUse `accuracy()` on the model and test set\n\n`accuracy(model, testset)`: Provides accuracy measures like MAE, MSE, MAPE, RMSE etc\n\nBacktesting with one step ahead forecasts, aka \"Time series cross validation\" can be done with a helper function `tsCV()`.\n\n`tsCV()`: returns forecast errors given a `forecastfunction` that returns a `forecast` object and number of steps ahead `h`. At `h` = 1 the forecast errors will just be the model residuals.\n\nHere's an example using the `naive()` model, forecasting one period ahead:\n\n```r\ntsCV(data, forecastfunction = naive, h = 1)\n```\n\n# Many Models\n\n## Exponential Models\n\n- `ses()`: Simple Exponential Smoothing, implement a smoothing parameter alpha on previous data\n- `holt()`: Holt's linear trend, SES + trend parameter. Use `damped`=TRUE for damped trending\n- `hw()`: Holt-Winters method, incorporates linear trend and seasonality. Set `seasonal`=\"additive\" for additive version or \"multiplicative\" for multiplicative version\n\n### ETS Models\n\nThe `forecast` package includes a function `ets()` for your exponential smoothing models. `ets()` estimates parameters using the likelihood of the data arising from the model, and selects the best model using corrected AIC (AICc)\n\n- Error = $\\{A, M\\}$\n- Trend = $\\{N, A, Ad\\}$\n- Seasonal = $\\{N, A, M\\}$\n\n## Transformations\n\nMay need to transform the data if it is non-stationary to improve your model prediction. To deal with non-constant variance, you can use a **Box-Cox** transformation.\n\n`BoxCox()`: Box-Cox uses a `lambda` parameter between -1 and 1 to stabilize the variance. A `lambda` of 0 performs a natural log, 1/3 does a cube root, etc while 1 does nothing and -1 performs an inverse transformation.\n\n**Differencing** is another transformation that uses differences between observations to model changes rather than the observations themselves.\n\n## ARIMA\n\n**Parameters**: $(p,d,q)(P,D,Q)m$\n\n| Parameter | Description                |\n| --------- | -------------------------- |\n| p         | # of autoregression lags   |\n| d         | # of lag-1 differences     |\n| q         | # of Moving Average lags   |\n| P         | # of seasonal AR lags      |\n| D         | # of seasonal differences  |\n| Q         | # of seasonal MA lags      |\n| m         | # of observations per year |\n\n`Arima()`: Implementation of the ARIMA function, set `include.constant` = TRUE to include drift aka the constant\n\n`auto.arima()`: Automatic implentation of the ARIMA function in `forecast`. Estimates parameters using maximum likelihood and does a stepwise search between a subset of all possible models. Can take a `lambda` argument to fit the model to transformed data and the forecasts will be back-transformed onto the original scale. Turn `stepwise` = FALSE to consider more models at the expense of more time.\n\n## Dynamic Regression\n\nRegression model with non-seasonal ARIMA errors, i.e. we allow e_t to be an ARIMA process rather than white noise.\n\nUsage example:\n\n```r\nfit <- auto.arima(data, xreg = xreg_data)\npred <- forecast(fit, xreg = newxreg_data)\n```\n\n## Dynamic Harmonic Regression\n\nDynamic Regression with `K` fourier terms to model seasonality. With higher `K` the model becomes more flexible.\n\nPro: Allows for any length seasonality, but assumes seasonal pattern is unchanging. `Arima()` and `auto.arima()` may run out of memory at large seasonal periods (i.e. >200).\n\n```r\n# Example with K = 1 and predict 4 periods in the future\nfit <- auto.arima(data, xreg = fourier(data, K = 1),\n                  seasonal = FALSE, lambda = 0)\npred <- forecast(fit, xreg = fourier(data, K = 1, h = 4))\n```\n\n## TBATS\n\nAutomated model that combines exponential smoothing, Box-Cox transformations, and Fourier terms.\nPro: Automated, allows for complex seasonality that changes over time.\nCons: Slow.\n\n- T: Trigonemtric terms for seasonality\n- B: Box-Cox transformations for heterogeneity\n- A: ARMA errors for short term dynamics\n- T: Trend (possibly damped)\n- S: Seasonal (including multiple and non-integer periods)\n","srcMarkdownNoYaml":"\n\nGetting started using the `forecast` package for time series data in R, as quickly as possible and no explanations.\n\nSource: [Forecasting: Principles and Practice](https://otexts.com/fpp2/)\n\n# Data Prep\n\nCoerce your data to `ts` format:\n\n```r\nlibrary(tidyverse)\nlibrary(forecast)\n\nmyts <- ts(df, start = c(1981,1), frequency = 12)\n```\n\n# Exploring and Plotting `ts` Data\n\n- `autoplot()`: Useful function to plot data and forecasts\n\n## Seasonality\n\n- `ggseasonplot()`: Create a seasonal plot\n- `ggsubseriesplot()`: Create mini plots for each season and show seasonal means\n\n## Lags and ACF\n\n- `gglagplot()`: Plot the time series against lags of itself\n- `ggAcf()`: Plot the autocorrelation function (ACF)\n\n## White Noise and the Ljung-Box Test\n\nWhite Noise is another name for a time series of iid data. Purely random. Ideally your model residuals should look like white noise.\n\nYou can use the Ljung-Box test to check if a time series is white noise, here's an example with 24 lags:\n\n```r\nBox.test(data, lag = 24, type=\"Lj\")\n```\n\np-value > 0.05 suggests data are not significantly different than white noise\n\n# Model Selection\n\nThe `forecast` package includes a few common models out of the box. Fit the model and create a `forecast` object, and then use the `forecast()` function on the object and a number of `h` periods to predict.\n\nExample of the workflow:\n\n```r\ntrain <- window(data, start = 1980)\nfit <- naive(train)\ncheckresiduals(fit)\npred <- forecast(fit, h=4)\naccuracy(pred, data)\n```\n\n## Naive Models\n\nUseful to benchmark against naive and seasonal naive models.\n\n- `naive()`\n- `snaive()`\n\n## Residuals\n\nResiduals are the difference between the model's fitted values and the actual data. Residuals should look like white noise and be:\n\n- Uncorrelated\n- Have mean zero\n\nAnd ideally have:\n\n- Constant variance\n- A normal distribution\n\n`checkresiduals()`: helper function to plot the residuals, plot the ACF and histogram, and do a Ljung-Box test on the residuals.\n\n## Evaluating Model Accuracy\n\nTrain/Test split with window function:\n\n`window(data, start, end)`: to slice the `ts` data\n\nUse `accuracy()` on the model and test set\n\n`accuracy(model, testset)`: Provides accuracy measures like MAE, MSE, MAPE, RMSE etc\n\nBacktesting with one step ahead forecasts, aka \"Time series cross validation\" can be done with a helper function `tsCV()`.\n\n`tsCV()`: returns forecast errors given a `forecastfunction` that returns a `forecast` object and number of steps ahead `h`. At `h` = 1 the forecast errors will just be the model residuals.\n\nHere's an example using the `naive()` model, forecasting one period ahead:\n\n```r\ntsCV(data, forecastfunction = naive, h = 1)\n```\n\n# Many Models\n\n## Exponential Models\n\n- `ses()`: Simple Exponential Smoothing, implement a smoothing parameter alpha on previous data\n- `holt()`: Holt's linear trend, SES + trend parameter. Use `damped`=TRUE for damped trending\n- `hw()`: Holt-Winters method, incorporates linear trend and seasonality. Set `seasonal`=\"additive\" for additive version or \"multiplicative\" for multiplicative version\n\n### ETS Models\n\nThe `forecast` package includes a function `ets()` for your exponential smoothing models. `ets()` estimates parameters using the likelihood of the data arising from the model, and selects the best model using corrected AIC (AICc)\n\n- Error = $\\{A, M\\}$\n- Trend = $\\{N, A, Ad\\}$\n- Seasonal = $\\{N, A, M\\}$\n\n## Transformations\n\nMay need to transform the data if it is non-stationary to improve your model prediction. To deal with non-constant variance, you can use a **Box-Cox** transformation.\n\n`BoxCox()`: Box-Cox uses a `lambda` parameter between -1 and 1 to stabilize the variance. A `lambda` of 0 performs a natural log, 1/3 does a cube root, etc while 1 does nothing and -1 performs an inverse transformation.\n\n**Differencing** is another transformation that uses differences between observations to model changes rather than the observations themselves.\n\n## ARIMA\n\n**Parameters**: $(p,d,q)(P,D,Q)m$\n\n| Parameter | Description                |\n| --------- | -------------------------- |\n| p         | # of autoregression lags   |\n| d         | # of lag-1 differences     |\n| q         | # of Moving Average lags   |\n| P         | # of seasonal AR lags      |\n| D         | # of seasonal differences  |\n| Q         | # of seasonal MA lags      |\n| m         | # of observations per year |\n\n`Arima()`: Implementation of the ARIMA function, set `include.constant` = TRUE to include drift aka the constant\n\n`auto.arima()`: Automatic implentation of the ARIMA function in `forecast`. Estimates parameters using maximum likelihood and does a stepwise search between a subset of all possible models. Can take a `lambda` argument to fit the model to transformed data and the forecasts will be back-transformed onto the original scale. Turn `stepwise` = FALSE to consider more models at the expense of more time.\n\n## Dynamic Regression\n\nRegression model with non-seasonal ARIMA errors, i.e. we allow e_t to be an ARIMA process rather than white noise.\n\nUsage example:\n\n```r\nfit <- auto.arima(data, xreg = xreg_data)\npred <- forecast(fit, xreg = newxreg_data)\n```\n\n## Dynamic Harmonic Regression\n\nDynamic Regression with `K` fourier terms to model seasonality. With higher `K` the model becomes more flexible.\n\nPro: Allows for any length seasonality, but assumes seasonal pattern is unchanging. `Arima()` and `auto.arima()` may run out of memory at large seasonal periods (i.e. >200).\n\n```r\n# Example with K = 1 and predict 4 periods in the future\nfit <- auto.arima(data, xreg = fourier(data, K = 1),\n                  seasonal = FALSE, lambda = 0)\npred <- forecast(fit, xreg = fourier(data, K = 1, h = 4))\n```\n\n## TBATS\n\nAutomated model that combines exponential smoothing, Box-Cox transformations, and Fourier terms.\nPro: Automated, allows for complex seasonality that changes over time.\nCons: Slow.\n\n- T: Trigonemtric terms for seasonality\n- B: Box-Cox transformations for heterogeneity\n- A: ARMA errors for short term dynamics\n- T: Trend (possibly damped)\n- S: Seasonal (including multiple and non-integer periods)\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"output-file":"2020-01-26-time-series-forecasting-in-r.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.52","theme":{"light":"cosmo"},"title-block-banner":true,"title":"Time Series Cheat Sheet in R","date":"2020-01-26","tags":["forecasting","r"],"categories":["modeling"],"summary":"Getting started using the `forecast` package for time series data in R, as quickly as possible and no explanations.","aliases":["/time-series-forecasting-in-r/"],"canonicalUrl":"https://www.nelsontang.com/blog/2020-01-26-time-series-forecasting-in-r"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}
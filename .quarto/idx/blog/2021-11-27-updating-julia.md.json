{"title":"Updating Your Julia Installation (Feb 2023)","markdown":{"yaml":{"title":"Updating Your Julia Installation (Feb 2023)","date":"2021-11-27","categories":["julia","workflow"],"summary":"What it takes to update from a previous install of Julia on Mac/Linux","aliases":["/updating-julia"],"canonicalUrl":"https://www.nelsontang.com/blog/2021-11-27-updating-julia","date-modified":"2023-02-15"},"headingText":"Updating and managing multiple Julia versions","containsRefs":false,"markdown":"\n\n\nOut of the box, Julia has a great package manager but it's missing something like `conda` or `pyenv` to manage different versions of Julia, or to update your current installation of Julia to the latest release. See below for what I use on my Mac:\n\n---\n\n**Feb 2023 Update:**\n\n_I recently switched out of `conda` and into `pyenv` and `poetry` on my mac, which ended up breaking my previous method of using `pyjill` to manage my julia installation (which requires python)._\n\n_This was a great opportunity to switch to `juliaup`, which is written in Rust and offers much of the same functionality without the dependence on python. However, it's not perfect ([particularly to users in PRC, as the author of `pyjill` notes here](https://github.com/johnnychen94/jill.py#why-i-make-the-python-fork-of-jill)) and I'll be keeping the old instructions of using `pyjill` for now:_\n\n<details>\n<summary>Click here for the old `pyjill` instructions (Python required)</summary>\n\n## Step 1: Use `jill`/`pyjill` to Download & Install Julia\n\nI used to mess with downloading the binaries and install files directly from the [julialang site](https://julialang.org/downloads/) and also tried homebrew, but both of these options were really clunky when it came to updating your existing installation. Instead, I just use `pyjill` ([Github](https://github.com/johnnychen94/jill.py)), which works perfectly on _both_ OSX, Windows, and Linux (note: requires python >=3.6).\n\n```bash\n# Install or update the latest version of jill (requires python>=3.6)\npip install jill --user -U\n# export the jill PATH somewhere, if this is your first time installing jill\necho 'export PATH=$PATH:/home/$USERNAME/.local/bin' >> ~/.zshrc\nsource ~/.zshrc\n# Install the latest stable release\njill install\n```\n\nThen the next time you need to update Julia, you only need to do `jill install` to get the latest.\n\n</details>\n\n---\n\n## Step 0: First-time Install with `juliaup`\n\nThe instructions on the [juliaup repo](https://github.com/JuliaLang/juliaup) are extensive, but I'll share a few key commands here:\n\n<details open>\n<summary> On a Mac, it's advised (as of Feb'23) to use the following `curl` command instead of `brew`</summary>\n\n```bash\ncurl -fsSL https://install.julialang.org | sh\n```\n\n</details>\n\nThis will run an interactive install script and for convenience it will update your `PATH` and install the latest release and set it as your default if you don't have Julia already installed.\n\nThen `juliaup status` will show you the list of versions you have installed, and show you which is the default version of julia that's symlinked to `julia`.\n\n```bash\njuliaup status\n```\n\n### Switching environments\n\nYou can always install an older release, let's say you want `1.8.4`:\n\n```bash\n# Add an older version of Julia, let's say 1.8.4\njuliaup add 1.8.4\n# Then to run that version of julia, all you would need to do is add `+1.8.4` when you launch julia, i.e.:\njulia +1.8.4\n```\n\nYou can also set it as the default channel with `juliaup default`:\n\n```bash\njuliaup default 1.8.4\n```\n\n## Step 1: Updating to the latest release with `juliaup`\n\n`juliaup` will automatically check for the latest release every so often when you launch `julia`, but you can manually update with:\n\n```bash\njuliaup update\n```\n\n## Step 2: Remove the Old `.julia` Folder _(optional, linux/OSX instructions)_\n\nAnother time sink I had was realizing that with a fresh update, I couldn't add packages anymore to julia because I didn't have root access to a folder hidden deep within the `.julia` folder in my user directory. I had to delete it and then julia worked fine after that after rebuilding the registry. This might not be as much of an issue after Julia 1.7, where they [changed the manifest and how the package registry handles different Julia versions](https://julialang.org/blog/2021/11/julia-1.7-highlights/#new_manifest_format).\n\n```bash\n# Go to your home directory\ncd\n# Delete that sucker with prejudice\nsudo rm -rf .julia\n```\n\n## Step 3: Update Jupyter Kernels\n\nNext we'll need to remove the old julia kernel from Jupyter with `jupyter kernelspec remove {{ kernel name }}`:\n\n```bash\n# See the list of existing jupyter kernels and find your old install\njupyter kernelspec list\n# My previous one was called julia-1.6, let's remove it\njupyter kernelspec remove julia-1.6\n```\n\nThen use IJulia to add a new one. Whenever you change the Julia binary you need to have IJulia rebuild in order to register the new kernel to jupyter, so go back to Julia and go to the `Pkg` prompt:\n\n```julia\n# In the Julia REPL, press the ] key to bring up the Pkg prompt\n(@v1.8) pkg> add IJulia\n(@v1.8) pkg> build IJulia\n```\n\nAt this point, if you're upgrading from Julia 1.7+ and it's a minor update (i.e. 1.7.2 to 1.7.3), your base package manifest should still be there and Julia will precompile and build those other packages so they'll be ready to go - no need to re-add them.\n\n## Step 4. Update Your Libraries (if upgrading from Julia < 1.7)\n\nFrom here on out you'll need to probably `build` and update your other libraries too, and if you use stuff like `PyCall`([link](https://github.com/JuliaPy/PyCall.jl)) where it downloads a distribution of python and hides it in your julia folder, have fun managing all of that! I'll do a writeup later when I figure this out a little more.\n\n```julia\n# A few common libraries that I install for data exploration and analysis\n(@v1.8) pkg> add Revise Plots Gadfly DataFrames DataFramesMeta XLSX CSV RDatasets Parquet\n```\n","srcMarkdownNoYaml":"\n\n# Updating and managing multiple Julia versions\n\nOut of the box, Julia has a great package manager but it's missing something like `conda` or `pyenv` to manage different versions of Julia, or to update your current installation of Julia to the latest release. See below for what I use on my Mac:\n\n---\n\n**Feb 2023 Update:**\n\n_I recently switched out of `conda` and into `pyenv` and `poetry` on my mac, which ended up breaking my previous method of using `pyjill` to manage my julia installation (which requires python)._\n\n_This was a great opportunity to switch to `juliaup`, which is written in Rust and offers much of the same functionality without the dependence on python. However, it's not perfect ([particularly to users in PRC, as the author of `pyjill` notes here](https://github.com/johnnychen94/jill.py#why-i-make-the-python-fork-of-jill)) and I'll be keeping the old instructions of using `pyjill` for now:_\n\n<details>\n<summary>Click here for the old `pyjill` instructions (Python required)</summary>\n\n## Step 1: Use `jill`/`pyjill` to Download & Install Julia\n\nI used to mess with downloading the binaries and install files directly from the [julialang site](https://julialang.org/downloads/) and also tried homebrew, but both of these options were really clunky when it came to updating your existing installation. Instead, I just use `pyjill` ([Github](https://github.com/johnnychen94/jill.py)), which works perfectly on _both_ OSX, Windows, and Linux (note: requires python >=3.6).\n\n```bash\n# Install or update the latest version of jill (requires python>=3.6)\npip install jill --user -U\n# export the jill PATH somewhere, if this is your first time installing jill\necho 'export PATH=$PATH:/home/$USERNAME/.local/bin' >> ~/.zshrc\nsource ~/.zshrc\n# Install the latest stable release\njill install\n```\n\nThen the next time you need to update Julia, you only need to do `jill install` to get the latest.\n\n</details>\n\n---\n\n## Step 0: First-time Install with `juliaup`\n\nThe instructions on the [juliaup repo](https://github.com/JuliaLang/juliaup) are extensive, but I'll share a few key commands here:\n\n<details open>\n<summary> On a Mac, it's advised (as of Feb'23) to use the following `curl` command instead of `brew`</summary>\n\n```bash\ncurl -fsSL https://install.julialang.org | sh\n```\n\n</details>\n\nThis will run an interactive install script and for convenience it will update your `PATH` and install the latest release and set it as your default if you don't have Julia already installed.\n\nThen `juliaup status` will show you the list of versions you have installed, and show you which is the default version of julia that's symlinked to `julia`.\n\n```bash\njuliaup status\n```\n\n### Switching environments\n\nYou can always install an older release, let's say you want `1.8.4`:\n\n```bash\n# Add an older version of Julia, let's say 1.8.4\njuliaup add 1.8.4\n# Then to run that version of julia, all you would need to do is add `+1.8.4` when you launch julia, i.e.:\njulia +1.8.4\n```\n\nYou can also set it as the default channel with `juliaup default`:\n\n```bash\njuliaup default 1.8.4\n```\n\n## Step 1: Updating to the latest release with `juliaup`\n\n`juliaup` will automatically check for the latest release every so often when you launch `julia`, but you can manually update with:\n\n```bash\njuliaup update\n```\n\n## Step 2: Remove the Old `.julia` Folder _(optional, linux/OSX instructions)_\n\nAnother time sink I had was realizing that with a fresh update, I couldn't add packages anymore to julia because I didn't have root access to a folder hidden deep within the `.julia` folder in my user directory. I had to delete it and then julia worked fine after that after rebuilding the registry. This might not be as much of an issue after Julia 1.7, where they [changed the manifest and how the package registry handles different Julia versions](https://julialang.org/blog/2021/11/julia-1.7-highlights/#new_manifest_format).\n\n```bash\n# Go to your home directory\ncd\n# Delete that sucker with prejudice\nsudo rm -rf .julia\n```\n\n## Step 3: Update Jupyter Kernels\n\nNext we'll need to remove the old julia kernel from Jupyter with `jupyter kernelspec remove {{ kernel name }}`:\n\n```bash\n# See the list of existing jupyter kernels and find your old install\njupyter kernelspec list\n# My previous one was called julia-1.6, let's remove it\njupyter kernelspec remove julia-1.6\n```\n\nThen use IJulia to add a new one. Whenever you change the Julia binary you need to have IJulia rebuild in order to register the new kernel to jupyter, so go back to Julia and go to the `Pkg` prompt:\n\n```julia\n# In the Julia REPL, press the ] key to bring up the Pkg prompt\n(@v1.8) pkg> add IJulia\n(@v1.8) pkg> build IJulia\n```\n\nAt this point, if you're upgrading from Julia 1.7+ and it's a minor update (i.e. 1.7.2 to 1.7.3), your base package manifest should still be there and Julia will precompile and build those other packages so they'll be ready to go - no need to re-add them.\n\n## Step 4. Update Your Libraries (if upgrading from Julia < 1.7)\n\nFrom here on out you'll need to probably `build` and update your other libraries too, and if you use stuff like `PyCall`([link](https://github.com/JuliaPy/PyCall.jl)) where it downloads a distribution of python and hides it in your julia folder, have fun managing all of that! I'll do a writeup later when I figure this out a little more.\n\n```julia\n# A few common libraries that I install for data exploration and analysis\n(@v1.8) pkg> add Revise Plots Gadfly DataFrames DataFramesMeta XLSX CSV RDatasets Parquet\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"output-file":"2021-11-27-updating-julia.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.52","theme":{"light":"cosmo"},"title-block-banner":true,"title":"Updating Your Julia Installation (Feb 2023)","date":"2021-11-27","categories":["julia","workflow"],"summary":"What it takes to update from a previous install of Julia on Mac/Linux","aliases":["/updating-julia"],"canonicalUrl":"https://www.nelsontang.com/blog/2021-11-27-updating-julia","date-modified":"2023-02-15"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}